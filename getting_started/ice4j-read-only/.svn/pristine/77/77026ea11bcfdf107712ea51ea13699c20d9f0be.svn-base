<?xml version="1.0" encoding="UTF-8"?>

<project name="ice4j" basedir="." default="rebuild">
    <property name="dest" value="classes"/>
    <property name="dest-test" value="classes-test"/>
    <property name="lib" value="lib"/>
    <property name="JUnit.home" value="${lib}"/>
    <property name="src" value="src"/>
    <property name="src2" value="test"/>
    <property name="junit.reports" value="junit-reports"/>
    <property name="junit.html.reports" value="${junit.reports}/html"/>
    <property name="ice4j.jar" value="ice4j.jar"/>
    <property name="doc" value="doc"/>
    <property name="java.doc" value="${doc}/api"/>

    <path id="project.class.path">
        <pathelement location="${dest}"/>
        <pathelement location="${lib}/jain-sdp.jar"/>
        <pathelement location="${lib}/weupnp-0.1.2-SNAPSHOT.jar"/>
    </path>
    <path id="test.class.path">
        <path refid="project.class.path" />
        <pathelement location="${dest-test}"/>
        <pathelement location="${JUnit.home}/junit.jar"/>
    </path>

    <!--Patternset to exclude files from the output directory:-->
    <patternset id="dest.exclude">
        <exclude name="package cache/"/>
        <exclude name="dependency cache/"/>
        <exclude name="test/"/>
    </patternset>

    <!--  ANT TARGETS -->

    <!-- compiles all classes -->
    <target name="compile" depends="init">
        <condition property="compile.javac.exclude.name" value="**/jdk8/**">
            <not>
                <matches string="${java.runtime.version}" pattern="^1\.8(\..*)?$"/>
            </not>
        </condition>
        <javac classpathref="project.class.path"
               debug="true"
               deprecation="true"
               destdir="${dest}"
               includeantruntime="false"
               nowarn="false"
               optimize="true"
               source="1.5"
               target="1.5">
            <compilerarg value="-Xlint"/>
            <src path="${src}"/>
            <exclude name="${compile.javac.exclude.name}"/>
        </javac>
    </target>

    <!-- compiles all tests -->
    <target name="compile-tests" depends="init">
        <javac classpathref="test.class.path"
               debug="true"
               deprecation="true"
               destdir="${dest-test}"
               nowarn="false"
               optimize="true"
               target="1.5"
               source="1.5">
            <src path="${src2}"/>
            <compilerarg value="-Xlint"/>
        </javac>
    </target>

    <!-- copies ressource files if any to the classes directory -->
    <target name="resource">
        <copy todir="${dest}">
            <fileset dir="${src}">
                <include name="**/*.jpe"/>
                <include name="**/*.jpeg"/>
                <include name="**/*.rmf"/>
                <include name="**/*.wav"/>
                <include name="**/*.mid"/>
                <include name="**/*.midi"/>
                <include name="**/*.au"/>
                <include name="**/*.gif"/>
                <include name="**/*.png"/>
                <include name="**/*.jpg"/>
                <include name="**/*.aiff"/>
                <include name="**/*.properties"/>
            </fileset>
            <fileset dir="${src2}">
                <include name="**/*.jpe"/>
                <include name="**/*.jpeg"/>
                <include name="**/*.rmf"/>
                <include name="**/*.wav"/>
                <include name="**/*.mid"/>
                <include name="**/*.midi"/>
                <include name="**/*.au"/>
                <include name="**/*.gif"/>
                <include name="**/*.png"/>
                <include name="**/*.jpg"/>
                <include name="**/*.aiff"/>
                <include name="**/*.properties"/>
            </fileset>
        </copy>
    </target>

    <!-- creates the javadocs -->
    <target name="javadoc">
        <javadoc author="true" destdir="${java.doc}" package="true">
            <fileset dir="${src}"/>
        </javadoc>
    </target>

    <!-- delete the contents of the classes directory-->
    <target name="clean">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${dest}"/>
            <fileset dir="${dest-test}"/>
            <fileset dir="${junit.reports}"/>
            <fileset dir="doc" />
        </delete>
        <delete file="${ice4j.jar}" failonerror="true" quiet="false"/>
    </target>

    <!-- make everything -->
    <target name="make" depends="compile,compile-tests,resource,jar"/>

    <!-- clean and make everything -->
    <target name="rebuild" depends="clean,make" />

    <!-- make javadoc -->
    <target name="doc" depends="make,javadoc" />

    <!-- create needed subdirs-->
    <target name="init">
        <mkdir dir="${dest}"/>
        <mkdir dir="${dest-test}"/>
        <mkdir dir="${junit.reports}"/>
        <mkdir dir="${junit.html.reports}"/>
    </target>

    <!-- create jar file-->
    <target name="jar" depends="compile">
        <jar compress="true" destfile="${ice4j.jar}">
            <fileset dir="${dest}">
                <patternset refid="dest.exclude"/>
                <include name="**/*.*"/>
            </fileset>
        </jar>
    </target>

    <!-- We use this target from within the test target in order to generate
    a human readable test report. We do not directly use the htmlreport
    target because we  need to include xalan in the classpath before we
    do.-->
    <target name="htmlreport">
        <junitreport todir="${junit.reports}">
            <fileset dir="${junit.reports}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.html.reports}"/>
        </junitreport>
    </target>

    <!-- Run the tests-->
    <target name="test" depends="compile-tests">
        <junit haltonfailure="true" fork="true" forkmode="once">
            <formatter type="xml"/>
            <formatter type="brief" usefile="false"/>
            <test name="org.ice4j.StunTestSuite" todir="${junit.reports}"/>
            <test name="org.ice4j.PseudoTcpTestSuite" todir="${junit.reports}"/>
            <classpath refid="test.class.path"/>
        </junit>

        <!-- Generate the html report.
        Run it quietly (i.e. redirect the output) because we don't won't to
        see its "Build Successful" output line as users might confuse it
        for a general build success while this might not be the case.-->
        <echo message="Generating HTML test reports ..."/>
        <java fork="true"
              classname="org.apache.tools.ant.launch.Launcher"
              classpath="${java.class.path}:${lib}/xalan-2.6.0.jar"
              failonerror="true"
              output="${junit.html.reports}/output.txt">
            <arg value="htmlreport"/>
        </java>
    </target>

    <!-- runs our sample application -->
    <target name="run-sample">
        <java fork="true"
              classname="test.Ice"
              classpathref="test.class.path">

            <!-- Tell java.util.logging about our logging preferences -->
            <sysproperty key="java.util.logging.config.file"
                         value="lib/logging.properties"/>
        </java>
    </target>
    
    <!-- Run pseudotcp sample application -->
    <target name="run-pseudotcp" depends="compile">
        <java fork="true"
              classname="test.IcePseudoTcp"
              classpathref="test.class.path">

            <!-- Tell java.util.logging about our logging preferences -->
            <sysproperty key="java.util.logging.config.file"
                         value="lib/logging.properties"/>
        </java>
    </target>

    <!-- Debug pseudotcp example on port 5005 -->
    <target name="debug-pseudotcp" depends="compile">
        <java fork="true"
              classname="test.IcePseudoTcp"
              classpathref="test.class.path">

            <!-- Tell java.util.logging about our logging preferences -->
            <sysproperty key="java.util.logging.config.file"
                         value="lib/logging.properties"/>
            <jvmarg value="-Xdebug" />
            <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005" />
        </java>
    </target>

    <!-- Debug pseudotcp example with netbeans -->
    <target name="nb-debug-pseudotcp" depends="compile">
        <nbjpdastart addressproperty="jpda.address" name="ice4j" transport="dt_socket">
            <classpath refid="test.class.path"/>
        </nbjpdastart>
        <java classname="test.IcePseudoTcp" fork="true">
            <classpath refid="test.class.path"/>
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xnoagent"/>
            <jvmarg value="-Djava.compiler=none"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>
            <!-- Tell java.util.logging about our logging preferences -->
            <sysproperty key="java.util.logging.config.file"
                         value="lib/logging.properties"/>
        </java>
    </target>

    <!-- runs our sample distributed application -->
    <target name="run-dist">
        <java fork="true"
              classname="test.IceDistributed"
              classpathref="test.class.path">

            <!-- Tell java.util.logging about our logging preferences -->
            <sysproperty key="java.util.logging.config.file"
                         value="lib/logging.properties"/>
        </java>
    </target>

    <!-- runs our sample Trickle ICE application -->
    <target name="run-trickle">
        <java fork="true"
              classname="test.TrickleIce"
              classpathref="test.class.path">

            <!-- Tell java.util.logging about our logging preferences -->
            <sysproperty key="java.util.logging.config.file"
                         value="lib/logging.properties"/>
        </java>
    </target>

    <!-- runs our sample lite application -->
    <target name="run-lite">
        <java fork="true"
              classname="test.IceLite"
              classpathref="test.class.path">

            <!-- Tell java.util.logging about our logging preferences -->
            <sysproperty key="java.util.logging.config.file"
                         value="lib/logging.properties"/>
        </java>
    </target>

    <!-- runs our sample NAT mapping application -->
    <target name="run-map">
        <java fork="true"
              classname="test.MappingTest"
              classpathref="test.class.path">

            <!-- Tell java.util.logging about our logging preferences -->
            <sysproperty key="java.util.logging.config.file"
                         value="lib/logging.properties"/>
        </java>
    </target>

    <!-- runs our sample aws application -->
    <target name="run-aws">
        <java fork="true"
              classname="test.AwsTest"
              classpathref="test.class.path">

            <!-- Tell java.util.logging about our logging preferences -->
            <sysproperty key="java.util.logging.config.file"
                         value="lib/logging.properties"/>
        </java>
    </target>

    <!-- Cruise Control Target-->
    <target name="cc-buildloop" depends="rebuild,test"/>
</project>
